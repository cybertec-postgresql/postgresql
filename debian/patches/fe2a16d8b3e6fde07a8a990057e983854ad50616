commit fe2a16d8b3e6fde07a8a990057e983854ad50616
Author: Andres Freund <andres@anarazel.de>
Date:   Thu Oct 15 17:38:00 2020 -0700

    llvmjit: Work around bug in LLVM 3.9 causing crashes after 72559438f92.
    
    Unfortunately in LLVM 3.9 LLVMGetAttributeCountAtIndex(func, index)
    crashes when called with an index that has 0 attributes. Since there's
    no way to work around this in the C API, add a small C++ wrapper doing
    so.
    
    The only reason this didn't fail before 72559438f92 is that there
    always are function attributes...
    
    Author: Andres Freund <andres@anarazel.de>
    Discussion: https://postgr.es/m/20201016001254.w2nfj7gd74jmb5in@alap3.anarazel.de
    Backpatch: 11-, like 72559438f92

diff --git a/src/backend/jit/llvm/llvmjit.c b/src/backend/jit/llvm/llvmjit.c
index 7965b61165..4c026d37d0 100644
--- a/src/backend/jit/llvm/llvmjit.c
+++ b/src/backend/jit/llvm/llvmjit.c
@@ -333,7 +333,14 @@ llvm_copy_attributes_at_index(LLVMValueRef v_from, LLVMValueRef v_to, uint32 ind
 	int			num_attributes;
 	LLVMAttributeRef *attrs;
 
-	num_attributes = LLVMGetAttributeCountAtIndex(v_from, index);
+	num_attributes = LLVMGetAttributeCountAtIndexPG(v_from, index);
+
+	/*
+	 * Not just for efficiency: LLVM <= 3.9 crashes when
+	 * LLVMGetAttributesAtIndex() is called for an index with 0 attributes.
+	 */
+	if (num_attributes == 0)
+		return;
 
 	attrs = palloc(sizeof(LLVMAttributeRef) * num_attributes);
 	LLVMGetAttributesAtIndex(v_from, index, attrs);
diff --git a/src/backend/jit/llvm/llvmjit_wrap.cpp b/src/backend/jit/llvm/llvmjit_wrap.cpp
index e8a7380325..37c006a1ff 100644
--- a/src/backend/jit/llvm/llvmjit_wrap.cpp
+++ b/src/backend/jit/llvm/llvmjit_wrap.cpp
@@ -16,6 +16,13 @@ extern "C"
 #include "postgres.h"
 }
 
+#include <llvm-c/Core.h>
+
+/* Avoid macro clash with LLVM's C++ headers */
+#undef Min
+
+#include <llvm/IR/Attributes.h>
+#include <llvm/IR/Function.h>
 #include <llvm/MC/SubtargetFeature.h>
 #include <llvm/Support/Host.h>
 
@@ -44,3 +51,28 @@ char *LLVMGetHostCPUFeatures(void) {
 	return strdup(Features.getString().c_str());
 }
 #endif
+
+/*
+ * Like LLVM's LLVMGetAttributeCountAtIndex(), works around a bug in LLVM 3.9.
+ *
+ * In LLVM <= 3.9, LLVMGetAttributeCountAtIndex() segfaults if there are no
+ * attributes at an index (fixed in LLVM commit ce9bb1097dc2).
+ */
+unsigned
+LLVMGetAttributeCountAtIndexPG(LLVMValueRef F, uint32 Idx)
+{
+	/*
+	 * This is more expensive, so only do when using a problematic LLVM
+	 * version.
+	 */
+#if LLVM_VERSION_MAJOR < 4
+	if (!llvm::unwrap<llvm::Function>(F)->getAttributes().hasAttributes(Idx))
+		return 0;
+#endif
+
+	/*
+	 * There is no nice public API to determine the count nicely, so just
+	 * always fall back to LLVM's C API.
+	 */
+	return LLVMGetAttributeCountAtIndex(F, Idx);
+}
diff --git a/src/include/jit/llvmjit.h b/src/include/jit/llvmjit.h
index 706906c1cc..325409acd5 100644
--- a/src/include/jit/llvmjit.h
+++ b/src/include/jit/llvmjit.h
@@ -129,6 +129,8 @@ extern char *LLVMGetHostCPUName(void);
 extern char *LLVMGetHostCPUFeatures(void);
 #endif
 
+extern unsigned LLVMGetAttributeCountAtIndexPG(LLVMValueRef F, uint32 Idx);
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif
