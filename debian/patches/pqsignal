commit 06a367c382d0a3595238eff2e777222dbc91911b
Author: Tom Lane <tgl@sss.pgh.pa.us>
Date:   Thu Oct 10 14:24:56 2019 -0400

    Put back pqsignal() as an exported libpq symbol.
    
    This reverts commit f7ab80285.  Per discussion, we can't remove an
    exported symbol without a SONAME bump, which we don't want to do.
    In particular that breaks usage of current libpq.so with pre-9.3
    versions of psql etc, which need libpq to export pqsignal().
    
    As noted in that commit message, exporting the symbol from libpgport.a
    won't work reliably; but actually we don't want to export src/port's
    implementation anyway.  Any pre-9.3 client is going to be expecting the
    definition that pqsignal() had before 9.3, which was that it didn't
    set SA_RESTART for SIGALRM.  Hence, put back pqsignal() in a separate
    source file in src/interfaces/libpq, and give it the old semantics.
    
    Back-patch to v12.
    
    Discussion: https://postgr.es/m/E1g5vmT-0003K1-6S@gemulon.postgresql.org

diff --git a/src/interfaces/libpq/Makefile b/src/interfaces/libpq/Makefile
index c734965d63..4b0a8c719d 100644
--- a/src/interfaces/libpq/Makefile
+++ b/src/interfaces/libpq/Makefile
@@ -29,7 +29,7 @@ endif
 
 OBJS=	fe-auth.o fe-auth-scram.o fe-connect.o fe-exec.o fe-misc.o fe-print.o fe-lobj.o \
 	fe-protocol2.o fe-protocol3.o pqexpbuffer.o fe-secure.o \
-	libpq-events.o
+	legacy-pqsignal.o libpq-events.o
 
 # src/backend/utils/mb
 OBJS += encnames.o wchar.o
diff --git a/src/interfaces/libpq/exports.txt b/src/interfaces/libpq/exports.txt
index 7c808e5215..ccec59919b 100644
--- a/src/interfaces/libpq/exports.txt
+++ b/src/interfaces/libpq/exports.txt
@@ -116,7 +116,7 @@ PQserverVersion           113
 PQgetssl                  114
 pg_char_to_encoding       115
 pg_valid_server_encoding  116
-# pqsignal                117  # no longer exported, see libpgport instead
+pqsignal                  117
 PQprepare                 118
 PQsendPrepare             119
 PQgetCancel               120
diff --git a/src/interfaces/libpq/legacy-pqsignal.c b/src/interfaces/libpq/legacy-pqsignal.c
new file mode 100644
index 0000000000..a56fbbce8e
--- /dev/null
+++ b/src/interfaces/libpq/legacy-pqsignal.c
@@ -0,0 +1,57 @@
+/*-------------------------------------------------------------------------
+ *
+ * legacy-pqsignal.c
+ *	  reliable BSD-style signal(2) routine stolen from RWW who stole it
+ *	  from Stevens...
+ *
+ * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
+ * Portions Copyright (c) 1994, Regents of the University of California
+ *
+ *
+ * IDENTIFICATION
+ *	  src/interfaces/libpq/legacy-pqsignal.c
+ *
+ *-------------------------------------------------------------------------
+ */
+#include "postgres_fe.h"
+
+#include <signal.h>
+
+
+/*
+ * This version of pqsignal() exists only because pre-9.3 releases
+ * of libpq exported pqsignal(), and some old client programs still
+ * depend on that.  (Since 9.3, clients are supposed to get it from
+ * libpgport instead.)
+ *
+ * Because it is only intended for backwards compatibility, we freeze it
+ * with the semantics it had in 9.2; in particular, this has different
+ * behavior for SIGALRM than the version in src/port/pqsignal.c.
+ *
+ * libpq itself uses this only for SIGPIPE (and even then, only in
+ * non-ENABLE_THREAD_SAFETY builds), so the incompatibility isn't
+ * troublesome for internal references.
+ */
+pqsigfunc
+pqsignal(int signo, pqsigfunc func)
+{
+#ifndef WIN32
+	struct sigaction act,
+				oact;
+
+	act.sa_handler = func;
+	sigemptyset(&act.sa_mask);
+	act.sa_flags = 0;
+	if (signo != SIGALRM)
+		act.sa_flags |= SA_RESTART;
+#ifdef SA_NOCLDSTOP
+	if (signo == SIGCHLD)
+		act.sa_flags |= SA_NOCLDSTOP;
+#endif
+	if (sigaction(signo, &act, &oact) < 0)
+		return SIG_ERR;
+	return oact.sa_handler;
+#else							/* WIN32 */
+	return signal(signo, func);
+#endif
+}
